Постановка задачи:
Имеется куб целочисленных данных (куб признаков 0 или 1). Отдельные элементы куба будем называть ячейками. Размеры куба заданы (в направлении I: Nx элементов, в направлении J: Ny, в направлении K: Nz). Куб хранится в одномерном массиве (размером Nx*Ny*Nz), данные в нем уложены в следующем порядке: вначале меняется индекс I, потом меняется индекс J, затем меняется индекс K.

Пример такого куба надо сделать самостоятельно, заполнить его случайным образом. Размер куба взять ориентировочно 100 млн. чисел (в реальных задачах могут быть и миллиарды чисел, скорость расчетов очень критична) - например, куб 400*250*100.

Требуется найти связанные между собой 3D области внутри куба (количество таких областей и номера ячеек, которые в них содержатся). Например, Область №1 (ячейки 100, 101 ... - нумерация сквозная по одномерному массиву), Область №2 ....

Связанная область состоит из отдельных связанных между собой ячеек. Ячейка связана с другой ячейкой, если она соприкасается с другой ячейкой по одной из граней. Если ячейки соприкасаются по ребру - то, они не связаны.
Скорость расчетов очень важна, для этой задачи общее время расчетов – не более нескольких секунд.

Чтобы было более понятно, прикладываю рисунок (плоский, соответствует, к примеру, слою куба K = 10). Синий цвет - это 0, зеленый - это 1. Еще раз обращаю внимание, что надо найти 3D области (не 2D), т.е. связанность ячеек должна проверяться по трем направлениям в пространстве.
Результат выполнения тестового задания:
1.	Исходный код программы;
2.	Короткое описание алгоритма;
3.	Время работы программы для куба из 100 млн. чисел.


//  ТЕСТОВАЯ ЗАДАЧА

using System;
namespace WindowsFormsApplication1
{
    class Program
    {

        //  МЕТОД, СОДЕРЖАЩИЙ САМ АЛГОРИТМ

        static void Sv_Obl()
        {
            int Nx = 0, Ny = 0, Nz = 0;

            //  ВЫЗОВ МЕТОДА ПО ВВОДУ РАЗМЕРОВ КУБА С КЛАВИАТУРЫ

            Console.WriteLine("\n--------Данные:-------------------\n");
            
Nx = Data(Nx, 'x'); Ny = Data(Ny, 'y'); Nz = Data(Nz, 'z');

            int[] kub = new int[Nx * Ny * Nz];                   //  Объявление и инициализация массива.
            
            //  ВЫЗОВ МЕТОДА ПО ЗАПОЛНЕНИЮ МАССИВА СЛУЧАЙНЫМ ОБРАЗОМ

            Rand(kub);

            //  ВЫЗОВ МЕТОДА ПО ПОИСКУ СВЯЗАННЫХ ОБЛАСТЕЙ

            string obl = Search(kub, Nx, Ny, Nz);

            //  ВЫВОД ДАННЫХ НА ЭКРАН

            Console.WriteLine(obl + "\n\n");
        }

        // МЕТОД ДЛЯ ВВЕДЕНИЯ РАЗМЕРОВ КУБА С КЛАВИАТУРЫ

        static int Data(int N, char c)
        {

            Console.Write(" Введите величину значения N{0}: ",c);    // Ввод данных с клавиатуры при запуске программы.
            N = Convert.ToInt16(Console.ReadLine());
            return N;
        }

        //  МЕТОД ДЛЯ ЗАПОЛНЕНИЯ МАССИВА СЛУЧАЙНЫМ ОБРАЗОМ

        static void Rand(int [] kub)
        {
            Random rand = new Random();                              //  Объявление переменной типа Random.
            for (int i = 0; i < kub.Length; i++)
                kub[i] = Convert.ToByte(rand.Next(0, 2));
        }



        //  МЕТОД ДЛЯ ПОИСКА СВЯЗАННЫХ ОБЛАСТЕЙ

        static string Search(int [] kub, int Nx, int Ny, int Nz)
        {
            Console.WriteLine("\n--------Связанные области:-------------------\n");

            string obl = "", s = ""; int x = 0; byte m = 0; ulong g = 0;
            for (int k = 0; k < Nz; k++)
            {
                for (int j = 0; j < Ny; j++)
                {
                    for (int i = x * (Nx); (i < (x + 1) * (Nx)) && (i<kub.Length); i++)
                    {
                        if (kub[i] == 1)
                        {
                            if (((i < (kub.Length - 1)) && (kub[i + 1] == 1)) || ((j != (Ny - 1)) && (kub[i + Nx] == 1)) || ((k != (Nz - 1)) && (kub[i + (Nx * Ny)] == 1)) ||
                                    ((i > 0)  && (kub[i - 1] == 1)) || (((j > 0) || (j==Ny-1)) && (kub[i - Nx] == 1)) || (((k > 0)||(k==Nz-1)) && (kub[i - (Nx * Ny)] == 1)))
                            {
                                m++;
                                s += i + " ";
                            }

                            else
                            {
                                if (m > 1)
                                {
                                    g++;
                                    obl += "\n   Область №" + g + " ( ячейки: " + s + ")";
                                }
                                m = 0;
                                s = string.Empty;
                            }
                        }
                    }
                    x++;
                }
            }
            return obl;
        }

        static void Main()
        {
            Sv_Obl();                                                   //  Вызов метода.
            Console.Write("\n   Нажмите любую клавишу для выхода...");
            Console.ReadKey();
        }
    }
}
